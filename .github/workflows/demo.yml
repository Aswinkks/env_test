
name: dbk cicd pipeline

on:
  push:
    branches:
      - tag
  
jobs:
  fetch-env-name:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    steps:
      - name: Some check on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/tag" ]; then
            echo "env_name=tag_branch" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "env_name=dev" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.ref }}" = "refs/heads/uat" ]; then
            echo "env_name=uat" >> "$GITHUB_OUTPUT"
          else
             echo "v1"
          fi    
  build:
    name: Create Release
    runs-on: ubuntu-latest
    needs: fetch-env-name
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          target_commitish: tag
#         id: create_release
#         uses: actions/create-release@latest
#         env:
#           GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#         with:
#           commitish: tag
#           tag_name: ${{github.run_number}}
#           release_name: Release ${{ needs.fetch-env-name.outputs.env_name }} ${{github.run_number}}
#           body: |
#             Changes in this Release
#             - First Change
#             - Second Change
#           draft: false
#           prerelease: false

#         uses: softprops/action-gh-release@v1
#         if: startsWith(github.ref, 'refs/tags/')
#         with:
#           body_path: ${{ github.workspace }}-CHANGELOG.txt
#           # note you'll typically need to create a personal access token
#           # with permissions to create releases in the other repo
#           token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
#         env:
#           GITHUB_REPOSITORY: my_gh_org/my_gh_repo
